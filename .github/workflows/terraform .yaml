name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: Name of the environment you want to deploy
        type: string
        required: true
        default: develop 
  push:
    branches: [ "main", "develop" ]
  pull_request:

run-name: "Terraform EC2 Deploy by @${{ github.actor }},through event: ${{ github.event_name }} "
   
permissions:
  contents: read


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Display Commit and Branch
      run: |
        # Display Commit and Branch
        COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        
        # Extract the branch name from GITHUB_REF
        BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
        
        # Display the formatted output
        echo "On Environment: ${{ inputs.Environment }}"
        echo "GitCommitId: $COMMIT_SHA"
        echo "OnGitBranch: $BRANCH_NAME" 

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
          terraform_version: "1.1.7"  
  
          
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init

    - name: Terraform Format
      run: terraform fmt

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform apply -auto-approve -input=false